# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# osos
# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: Combined Workflow

on:
  push:
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  # Add a job for running Jest tests
  jest-tests-frontend: #OK
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies for Jest
        working-directory: Web Ui
        run: npm install

      - name: Run Jest tests
        working-directory: Web Ui
        run: npm test

  jest-tests-backend: #OK
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies for Jest
        working-directory: server
        run: npm install

      - name: Run Jest tests
        working-directory: server
        run: npm test

  # Add a job for running Cypress tests
  cypress-tests: #OK
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js for Cypress
        uses: actions/setup-node@v4
        with:
          node-version: "20" # You can adjust the Node.js version as needed for Cypress

      - name: Install dependencies for Cypress
        working-directory: Web Ui
        run: npm install

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          working-directory: Web Ui
          start: npm run dev

      - name: Stop Your Application
        working-directory: Web Ui
        run: pkill -f "vite" # Use pkill to stop the development server

  sonarcloud:
    name: SonarCloud
    needs: [cypress-tests, jest-tests-backend, jest-tests-frontend]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_SCANNER_OPTS: -Dsonar.pullrequest.github.summary_comment=true

      - name: Wait for the quality gate result
        run: sleep 5

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

        #continue-on-error: true  # Esta opción permite que el workflow siga ejecutándose aunque falle la Quality Gate

      - name: "SonarQube Quality Gate Status value"
        run: |
          echo "${{ steps.sonarqube-quality-gate-check.outputs.project-status }}"
          echo "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-result }}"
  # Jobs for prettier
  prettier:
    runs-on: ubuntu-latest
    environment: staging
    needs: sonarcloud
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        working-directory: Web Ui
        run: npm install

      - name: Run Prettier
        working-directory: Web Ui
        run: npx prettier --write "src/**/*.{js,ts,tsx}"

      - name: Check for Changes in TypeScript files
        id: check-changes
        working-directory: Web Ui
        run: |
          git config --global user.name "{{ github.actor }}"
          git config --global user.email "{{ github.actor }}@users.noreply.github.com"
          if [[ -n $(git status --porcelain "src/**/*.{ts,tsx}") ]]; then
            echo "Changes detected in TypeScript files."
            git add .
            git commit -m "Auto-format code with Prettier"
            git push
          else
            echo "No changes to commit in TypeScript files."
            exit 0
          fi
  deploy_firebase_staging:
    runs-on: ubuntu-latest
    environment:
      name: staging
    needs: prettier
    #Ejecutar solo si es la rama staging #
    if: github.event.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Set Environment Variables
        working-directory: Web Ui
        run: |
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" > ./.env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> ./.env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> ./.env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> ./.env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> ./.env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> ./.env
          echo "VITE_API_URL=${{ secrets.API_URL }}" >> ./.env
          echo "VITE_DECRYPTION_KEY=${{ secrets.VITE_DECRYPTION_KEY }}" >> ./.env

      - name: Install Dependencies
        working-directory: Web Ui
        run: npm install

      - name: Npm ci
        working-directory: Web Ui
        run: npm ci

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Enable webframeworks
        run: firebase experiments:enable webframeworks

      - name: Npm run build
        working-directory: Web Ui
        run: npm run build

      - name: Deploy to Firebase Staging
        working-directory: Web Ui
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          firebase deploy --project ${{ secrets.FIREBASE_PROJECT_ID }}
  deploy_firebase_production:
    runs-on: ubuntu-latest
    environment:
      name: production
    needs: [deploy_firebase_staging]
    #Ejecutar solo si es la rama main
    # if: github.event.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Set Environment Variables
        working-directory: Web Ui
        run: |
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" > ./.env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> ./.env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> ./.env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> ./.env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> ./.env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> ./.env
          echo "VITE_API_URL=${{ secrets.API_URL }}" >> ./.env
          echo "VITE_DECRYPTION_KEY=${{ secrets.VITE_DECRYPTION_KEY }}" >> ./.env

      - name: Install Dependencies
        working-directory: Web Ui
        run: npm install

      - name: Npm ci
        working-directory: Web Ui
        run: npm ci

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Enable webframeworks
        run: firebase experiments:enable webframeworks

      - name: Npm run build
        working-directory: Web Ui
        run: npm run build

      - name: Deploy to Firebase Production
        working-directory: Web Ui
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          firebase deploy --project ${{ secrets.FIREBASE_PROJECT_ID }}
  deploy_vercel_staging:
    runs-on: ubuntu-latest
    environment:
      name: staging
    needs: prettier
    #Ejecutar solo si es la rama staging
    if: github.event.ref == 'refs/heads/main'
    steps:
      - name: "Echo values"
        run: |
          echo $VERCEL_PROJECT_ID
          echo $VERCEL_ORG_ID 
          echo $VERCEL_TOKEN
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Set Environment Variables
        run: |
          echo "PGHOST=${{ secrets.PGHOST }}" >> ./server/.env
          echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> ./server/.env
          echo "PGUSER=${{ secrets.PGUSER }}" >> ./server/.env
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> ./server/.env
          echo "PGPORT=${{ secrets.PGPORT }}" >> ./server/.env
          echo "REACT_APP_AUTH_TOKEN=${{ secrets.REACT_APP_AUTH_TOKEN }}" >> ./server/.env
          echo "LLM_API_URL=${{ secrets.LLM_API_URL }}" >> ./server/.env
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> ./server/.env
      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link to Staging Project
        run: |
          cd ./server
          vercel link --yes --project tdd-lab-api-staging --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Staging
        run: |
          cd ./server
          vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} -y
  deploy_vercel_production:
    runs-on: ubuntu-latest
    environment:
      name: production
    needs: [deploy_vercel_staging]
    #Ejecutar solo si es la rama main

    #   env:
    #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    #     VERCEL_TOKEN: ${{secrets.VERCEL_TOKEN }}

    steps:
      - name: "Echo values"
        run: |
          echo $VERCEL_PROJECT_ID
          echo $VERCEL_ORG_ID 
          echo $VERCEL_TOKEN 

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Set Environment Variables
        run: |
          echo "PGHOST=${{ secrets.PGHOST }}" >> ./server/.env
          echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> ./server/.env
          echo "PGUSER=${{ secrets.PGUSER }}" >> ./server/.env
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> ./server/.env
          echo "PGPORT=${{ secrets.PGPORT }}" >> ./server/.env
          echo "REACT_APP_AUTH_TOKEN=${{ secrets.REACT_APP_AUTH_TOKEN }}" >> ./server/.env
          echo "LLM_API_URL=${{ secrets.LLM_API_URL }}" >> ./server/.env
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> ./server/.env
      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link to Production Project
        run: |
          cd ./server
          vercel link --yes --project tdd-lab-api --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Production
        run: |
          cd ./server
          vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} -y
